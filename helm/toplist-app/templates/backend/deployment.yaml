{{- if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "toplist-app.fullname" . }}-backend
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "toplist-app.backend.labels" . | nindent 4 }}
spec:
  {{- if not .Values.backend.autoscaling.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "toplist-app.backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/backend/configmap.yaml") . | sha256sum }}
        {{- with .Values.backend.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "toplist-app.backend.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "toplist-app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.backend.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-db
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h {{ include "toplist-app.postgresql.fullname" . }} -p 5432 -U {{ .Values.postgresql.auth.username }}; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 5
              done
              echo "PostgreSQL is ready!"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "toplist-app.postgresql.secretName" . }}
                  key: {{ include "toplist-app.postgresql.userPasswordKey" . }}
      containers:
        - name: backend
          securityContext:
            {{- toYaml .Values.backend.securityContext | nindent 12 }}
          image: {{ include "toplist-app.backend.image" . }}
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.backend.service.targetPort }}
              protocol: TCP
          {{- if .Values.backend.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.backend.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.backend.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.backend.readinessProbe | nindent 12 }}
          {{- end }}
          env:
            {{- range .Values.backend.env }}
            - name: {{ .name }}
              {{- if .value }}
              value: {{ tpl .value $ | quote }}
              {{- else if .valueFrom }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "toplist-app.fullname" . }}-backend-config
            - secretRef:
                name: {{ include "toplist-app.fullname" . }}-backend-secret
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
      {{- with .Values.backend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.backend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
